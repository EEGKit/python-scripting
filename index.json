{
  "api/Bonsai.Scripting.Python.CreateModule.html": {
    "href": "api/Bonsai.Scripting.Python.CreateModule.html",
    "title": "Class CreateModule | Bonsai.Scripting.Python",
    "keywords": "Class CreateModule Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Represents an operator that creates a top-level module in the Python runtime. public class CreateModule : Source<PyModule> Inheritance object Source<PyModule> CreateModule Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets or sets the name of the top-level module. public string Name { get; set; } Property Value string ScriptPath Gets or sets the path to the Python script file to run on module initialization. [FileNameFilter(\"Python Files (*.py)|*.py|All Files|*.*\")] public string ScriptPath { get; set; } Property Value string Methods Generate() Generates an observable sequence that contains the created top-level module. public override IObservable<PyModule> Generate() Returns IObservable<PyModule> A sequence containing a single instance of the Python.Runtime.PyModule class representing the created top-level module."
  },
  "api/Bonsai.Scripting.Python.CreateRuntime.html": {
    "href": "api/Bonsai.Scripting.Python.CreateRuntime.html",
    "title": "Class CreateRuntime | Bonsai.Scripting.Python",
    "keywords": "Class CreateRuntime Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Represents an operator that creates a Python runtime object which can be used to import modules, evaluate expressions, and pass data to and from a Python scope. public class CreateRuntime : Source<RuntimeManager> Inheritance object Source<RuntimeManager> CreateRuntime Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties PythonHome Gets or sets the location where the standard Python libraries are installed. public string PythonHome { get; set; } Property Value string Remarks If no location is specified, the runtime will be created from the currently activated Python virtual environment. ScriptPath Gets or sets the path to the Python script file to run on runtime initialization. [FileNameFilter(\"Python Files (*.py)|*.py|All Files|*.*\")] public string ScriptPath { get; set; } Property Value string Methods Generate() Creates an observable sequence that initializes a Python runtime object which can be used to import modules, evaluate expressions, and pass data to and from a Python scope. public override IObservable<RuntimeManager> Generate() Returns IObservable<RuntimeManager> An observable sequence that initializes and returns a RuntimeManager object on subscription. On cancellation, the runtime object is disposed."
  },
  "api/Bonsai.Scripting.Python.Eval.html": {
    "href": "api/Bonsai.Scripting.Python.Eval.html",
    "title": "Class Eval | Bonsai.Scripting.Python",
    "keywords": "Class Eval Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Represents an operator that evaluates a Python expression in the specified top-level module. public class Eval : Combinator<PyObject> Inheritance object Combinator<PyObject> Eval Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Expression Gets or sets the Python expression to evaluate. public string Expression { get; set; } Property Value string Module Gets or sets the top-level module on which to evaluate the Python expression. public PyModule Module { get; set; } Property Value PyModule Methods Process(IObservable<RuntimeManager>) Evaluates an expression in the main module of the Python runtime. public IObservable<PyObject> Process(IObservable<RuntimeManager> source) Parameters source IObservable<RuntimeManager> A sequence containing the Python runtime in which to evaluate the expression. Returns IObservable<PyObject> A sequence of Python.Runtime.PyObject handles representing the result of evaluating the Python expression. Process(IObservable<PyModule>) Evaluates a Python expression in an observable sequence of modules. public IObservable<PyObject> Process(IObservable<PyModule> source) Parameters source IObservable<PyModule> The sequence of modules in which to evaluate the Python expression. Returns IObservable<PyObject> A sequence of Python.Runtime.PyObject handles representing the result of evaluating the Python expression. Process<TSource>(IObservable<TSource>) Evaluates a Python expression in the specified top-level module whenever an observable sequence emits a notification. public override IObservable<PyObject> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> The sequence of notifications used to trigger evaluation of the Python expression. Returns IObservable<PyObject> A sequence of Python.Runtime.PyObject handles representing the result of evaluating the Python expression. Type Parameters TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Scripting.Python.Exec.html": {
    "href": "api/Bonsai.Scripting.Python.Exec.html",
    "title": "Class Exec | Bonsai.Scripting.Python",
    "keywords": "Class Exec Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Represents an operator that executes a Python script in the specified top-level module. public class Exec : Combinator<PyModule> Inheritance object Combinator<PyModule> Exec Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Module Gets or sets the top-level module on which to execute the Python script. public PyModule Module { get; set; } Property Value PyModule Script Gets or sets the Python script to evaluate. public string Script { get; set; } Property Value string Methods Process(IObservable<RuntimeManager>) Executes a script in the main module of the Python runtime. public IObservable<PyModule> Process(IObservable<RuntimeManager> source) Parameters source IObservable<RuntimeManager> A sequence containing the Python runtime in which to execute the script. Returns IObservable<PyModule> A sequence containing the Python.Runtime.PyModule object representing the top-level module where the Python script was executed. Process(IObservable<PyModule>) Executes a Python script in an observable sequence of modules. public IObservable<PyModule> Process(IObservable<PyModule> source) Parameters source IObservable<PyModule> The sequence of modules in which to execute the Python script. Returns IObservable<PyModule> An observable sequence that is identical to the source sequence but where there is an additional side effect of executing the Python script in each of the Python.Runtime.PyModule objects. Process<TSource>(IObservable<TSource>) Executes a Python script in the specified top-level module whenever an observable sequence emits a notification. public override IObservable<PyModule> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> The sequence of notifications used to trigger execution of the Python script. Returns IObservable<PyModule> A sequence of Python.Runtime.PyModule objects representing the top-level module where each Python script was executed. Type Parameters TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Scripting.Python.Get.html": {
    "href": "api/Bonsai.Scripting.Python.Get.html",
    "title": "Class Get | Bonsai.Scripting.Python",
    "keywords": "Class Get Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Represents an operator that gets the value of a variable in the specified Python module. public class Get : Source<PyObject> Inheritance object Source<PyObject> Get Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Module Gets or sets the Python module containing the variable. public PyModule Module { get; set; } Property Value PyModule VariableName Gets or sets the name of the variable to get the value of. public string VariableName { get; set; } Property Value string Methods Generate() Gets the value of a variable in the specified Python module and surfaces it through an observable sequence. public override IObservable<PyObject> Generate() Returns IObservable<PyObject> A sequence containing the value of the Python runtime variable as a Python.Runtime.PyObject. Generate<TSource>(IObservable<TSource>) Gets the value of a variable in the specified Python module whenever an observable sequence emits a notification. public IObservable<PyObject> Generate<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> The sequence of notifications used to get the value of the variable. Returns IObservable<PyObject> A sequence of Python.Runtime.PyObject handles representing the value of the Python runtime variable. Type Parameters TSource The type of the elements in the source sequence. Process(IObservable<RuntimeManager>) Gets the value of the specified variable in the main module of the Python runtime. public IObservable<PyObject> Process(IObservable<RuntimeManager> source) Parameters source IObservable<RuntimeManager> A sequence containing the Python runtime from which to get the value of the specified variable. Returns IObservable<PyObject> A sequence of Python.Runtime.PyObject handles representing the value of the specified variable in the main module of the Python runtime. Process(IObservable<PyModule>) Gets the value of the specified variable in each of the Python modules in an observable sequence. public IObservable<PyObject> Process(IObservable<PyModule> source) Parameters source IObservable<PyModule> The sequence of modules from which to get the value of the specified variable. Returns IObservable<PyObject> A sequence of Python.Runtime.PyObject handles representing the value of the specified variable for each of the modules in the source sequence."
  },
  "api/Bonsai.Scripting.Python.GetRuntime.html": {
    "href": "api/Bonsai.Scripting.Python.GetRuntime.html",
    "title": "Class GetRuntime | Bonsai.Scripting.Python",
    "keywords": "Class GetRuntime Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Represents an operator that gets the Python runtime object which can be used to import modules, evaluate expressions, and pass data to and from Python. public class GetRuntime : Source<RuntimeManager> Inheritance object Source<RuntimeManager> GetRuntime Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The runtime object notification is emitted while holding the global interpreter lock. Methods Generate() Wraps an observable sequence to ensure all notifications are emitted while holding the Python global interpreter lock. public override IObservable<RuntimeManager> Generate() Returns IObservable<RuntimeManager> An observable sequence that returns the active RuntimeManager object on subscription. The value is emitted while holding the global interpreter lock."
  },
  "api/Bonsai.Scripting.Python.ObserveOnGIL.html": {
    "href": "api/Bonsai.Scripting.Python.ObserveOnGIL.html",
    "title": "Class ObserveOnGIL | Bonsai.Scripting.Python",
    "keywords": "Class ObserveOnGIL Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Represents an operator that wraps the source sequence to ensure all notifications are emitted while holding the Python global interpreter lock. public class ObserveOnGIL : Combinator Inheritance object Combinator ObserveOnGIL Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process<TSource>(IObservable<TSource>) Wraps an observable sequence to ensure all notifications are emitted while holding the Python global interpreter lock. public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> The source sequence to wrap. Returns IObservable<TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of ensuring that all notifications are emitted inside the Python global interpreter lock. Type Parameters TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Scripting.Python.RuntimeManager.html": {
    "href": "api/Bonsai.Scripting.Python.RuntimeManager.html",
    "title": "Class RuntimeManager | Bonsai.Scripting.Python",
    "keywords": "Class RuntimeManager Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Provides functionality for initializing and managing resources held by the Python runtime and an interface for scheduling work in the runtime scheduler. public class RuntimeManager : IDisposable Inheritance object RuntimeManager Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Dispose() Shutdown the thread and release all resources associated with the Python runtime. All remaining work scheduled after shutdown is abandoned. public void Dispose()"
  },
  "api/Bonsai.Scripting.Python.Set.html": {
    "href": "api/Bonsai.Scripting.Python.Set.html",
    "title": "Class Set | Bonsai.Scripting.Python",
    "keywords": "Class Set Namespace Bonsai.Scripting.Python Assembly Bonsai.Scripting.Python.dll Represents an operator that adds or updates a Python runtime variable in the specified top-level module. public class Set : Sink Inheritance object Combinator Sink Set Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Module Gets or sets the Python top-level module containing the variable. public PyModule Module { get; set; } Property Value PyModule VariableName Gets or sets the name of the variable to add or update the value of. public string VariableName { get; set; } Property Value string Methods Process<TSource>(IObservable<TSource>) Adds or updates a Python runtime variable in the specified top-level module with the values from an observable sequence. public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> The sequence of values used to update the Python runtime variable. Returns IObservable<TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of setting the specified Python runtime variable to the values of the sequence. Type Parameters TSource The type of the values in the source sequence."
  },
  "api/Bonsai.Scripting.Python.html": {
    "href": "api/Bonsai.Scripting.Python.html",
    "title": "Namespace Bonsai.Scripting.Python | Bonsai.Scripting.Python",
    "keywords": "Namespace Bonsai.Scripting.Python Classes CreateModule Represents an operator that creates a top-level module in the Python runtime. CreateRuntime Represents an operator that creates a Python runtime object which can be used to import modules, evaluate expressions, and pass data to and from a Python scope. Eval Represents an operator that evaluates a Python expression in the specified top-level module. Exec Represents an operator that executes a Python script in the specified top-level module. Get Represents an operator that gets the value of a variable in the specified Python module. GetRuntime Represents an operator that gets the Python runtime object which can be used to import modules, evaluate expressions, and pass data to and from Python. ObserveOnGIL Represents an operator that wraps the source sequence to ensure all notifications are emitted while holding the Python global interpreter lock. RuntimeManager Provides functionality for initializing and managing resources held by the Python runtime and an interface for scheduling work in the runtime scheduler. Set Represents an operator that adds or updates a Python runtime variable in the specified top-level module."
  },
  "articles/modules.html": {
    "href": "articles/modules.html",
    "title": "Dynamic Modules | Bonsai.Scripting.Python",
    "keywords": "Dynamic Modules The Python Scripting package allows you to define dynamic modules at runtime. This is useful if you need to isolate specific scripts, or keep track of state variables evolving independently in different parts of the workflow. To create a new module, you can use the CreateModule operator together with a ResourceSubject: Warning Make sure to always pair the CreateModule operator together with a ResourceSubject to ensure that your module is correctly destroyed when your workflow terminates. Once the module is declared, you can now pass it to any of your Python operators to make sure they run their code in the correct scope: Tip You can think of modules as \"objects\", as they encapsulate all their state variables inside a unique Python scope. Warning If you do not provide a specific module for a Python scripting operator to run in, it will always run in the global Python main module."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | Bonsai.Scripting.Python",
    "keywords": "Introduction The Python Scripting package is a Bonsai interface for the Python programming language. It uses Python.NET under the hood to provide a seamless integration between the CPython runtime and data streaming in a Bonsai workflow. You can use the Python Scripting package to run native Python scripts, import any module available to Python, and read or write to any variable in a named scope. The package is designed to work with any Python version from 3.7 onwards, and you can also use it in combination with Python virtual environments to fully isolate your project dependencies. How to install Install Bonsai. From the package manager, search and install the Bonsai - Python Scripting package. Install Python In addition to the Python Scripting package you need to have a version of Python installed in your system. Below are suggested installation steps for Windows and Linux. Windows Linux Download and install the latest Python distribution. Run the following commands to install the latest stable Python for your operating system: sudo apt install python3 sudo apt install libpython3-dev Create a Python environment We recommend using the venv tool to create virtual environments for running your specific projects. To create a virtual environment you can run the following command from inside the folder where you want to install the environment: python -m venv .venv Create a Python runtime The CreateRuntime node launches the Python kernel and creates the main global scope for running Python scripts. You must set the PythonHome property to the environment folder (or your Python home directory) before starting the workflow: Alternatively, you can activate the virtual environment before starting Bonsai. In this case you do not need to specify the Python home directory. Tip You can set the value of the ScriptPath property to specify a main script that will be run when the Python runtime is initialized. This script can be used to import all the main modules to be used in your workflow, or initialize any state variables to be manipulated during execution. Run Python code The Eval operator can be used anywhere in your workflow to interact with the Python runtime, just as if you were writing code in the Python REPL: You can also use the Exec operator to run Python statements dynamically, for example to import new modules: Read and write state variables To interface with Python state variables, you can use the Get and Set operators: Warning All the operators in the Python Scripting package must run under the Python Global Interpreter Lock. This means that although execution of Python code can be triggered asynchronously anywhere in the workflow, there will be a bottleneck when accessing the interpreter. Because of this, we currently do not recommend running large number of parallel calls to Python. Scripting Extensions Custom script files can be executed when creating the Python runtime with CreateRuntime or when creating a new module with CreateModule. To edit script files we recommend Visual Studio Code and the Python extension for Visual Studio Code. If both your virtual environment and your custom Python scripts are placed relative to your main workflow, VS Code can be launched from the Bonsai IDE and will be able to correctly pick up the right environment when editing the scripts. Warning These docs are under active development, feel free to contribute by either raising an issue or following the links to Edit this page."
  }
}